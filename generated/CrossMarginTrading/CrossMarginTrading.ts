// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AccountLiquidated extends ethereum.Event {
  get params(): AccountLiquidated__Params {
    return new AccountLiquidated__Params(this);
  }
}

export class AccountLiquidated__Params {
  _event: AccountLiquidated;

  constructor(event: AccountLiquidated) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LiquidationShortfall extends ethereum.Event {
  get params(): LiquidationShortfall__Params {
    return new LiquidationShortfall__Params(this);
  }
}

export class LiquidationShortfall__Params {
  _event: LiquidationShortfall;

  constructor(event: LiquidationShortfall) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class AccountUpdated extends ethereum.Event {
  get params(): AccountUpdated__Params {
    return new AccountUpdated__Params(this);
  }
}

export class AccountUpdated__Params {
  _event: AccountUpdated;

  constructor(event: AccountUpdated) {
    this._event = event;
  }

  get trader(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class CrossMarginTrading__getBorrowAmountsResult {
  value0: Array<Address>;
  value1: Array<BigInt>;

  constructor(value0: Array<Address>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }
}

export class CrossMarginTrading__getHoldingAmountsResult {
  value0: Array<Address>;
  value1: Array<BigInt>;

  constructor(value0: Array<Address>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }
}

export class CrossMarginTrading__pairPricesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class CrossMarginTrading__registerTradeAndBorrowResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class CrossMarginTrading__stakeAttackRecordsResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;
  value3: Address;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: BigInt,
    value3: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    return map;
  }
}

export class CrossMarginTrading__tokenPricesResult {
  value0: BigInt;
  value1: BigInt;
  value2: Bytes;
  value3: Bytes;

  constructor(value0: BigInt, value1: BigInt, value2: Bytes, value3: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromFixedBytes(this.value2));
    map.set("value3", ethereum.Value.fromFixedBytes(this.value3));
    return map;
  }
}

export class CrossMarginTrading__volatilitySettingsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class CrossMarginTrading extends ethereum.SmartContract {
  static bind(address: Address): CrossMarginTrading {
    return new CrossMarginTrading("CrossMarginTrading", address);
  }

  MAINTAINER_CUT_PERCENT(): BigInt {
    let result = super.call(
      "MAINTAINER_CUT_PERCENT",
      "MAINTAINER_CUT_PERCENT():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAINTAINER_CUT_PERCENT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAINTAINER_CUT_PERCENT",
      "MAINTAINER_CUT_PERCENT():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  UPDATE_RATE_PERMIL(): BigInt {
    let result = super.call(
      "UPDATE_RATE_PERMIL",
      "UPDATE_RATE_PERMIL():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_UPDATE_RATE_PERMIL(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "UPDATE_RATE_PERMIL",
      "UPDATE_RATE_PERMIL():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  avgLiquidationPerCall(): BigInt {
    let result = super.call(
      "avgLiquidationPerCall",
      "avgLiquidationPerCall():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_avgLiquidationPerCall(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "avgLiquidationPerCall",
      "avgLiquidationPerCall():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  canBeLiquidated(trader: Address): boolean {
    let result = super.call(
      "canBeLiquidated",
      "canBeLiquidated(address):(bool)",
      [ethereum.Value.fromAddress(trader)]
    );

    return result[0].toBoolean();
  }

  try_canBeLiquidated(trader: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canBeLiquidated",
      "canBeLiquidated(address):(bool)",
      [ethereum.Value.fromAddress(trader)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  coolingOffPeriod(): BigInt {
    let result = super.call(
      "coolingOffPeriod",
      "coolingOffPeriod():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_coolingOffPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "coolingOffPeriod",
      "coolingOffPeriod():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  failureThreshold(): BigInt {
    let result = super.call(
      "failureThreshold",
      "failureThreshold():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_failureThreshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "failureThreshold",
      "failureThreshold():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBorrowAmounts(
    trader: Address
  ): CrossMarginTrading__getBorrowAmountsResult {
    let result = super.call(
      "getBorrowAmounts",
      "getBorrowAmounts(address):(address[],uint256[])",
      [ethereum.Value.fromAddress(trader)]
    );

    return new CrossMarginTrading__getBorrowAmountsResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray()
    );
  }

  try_getBorrowAmounts(
    trader: Address
  ): ethereum.CallResult<CrossMarginTrading__getBorrowAmountsResult> {
    let result = super.tryCall(
      "getBorrowAmounts",
      "getBorrowAmounts(address):(address[],uint256[])",
      [ethereum.Value.fromAddress(trader)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CrossMarginTrading__getBorrowAmountsResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray()
      )
    );
  }

  getCurrentPriceInPeg(
    token: Address,
    inAmount: BigInt,
    voluntary: boolean
  ): BigInt {
    let result = super.call(
      "getCurrentPriceInPeg",
      "getCurrentPriceInPeg(address,uint256,bool):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(inAmount),
        ethereum.Value.fromBoolean(voluntary)
      ]
    );

    return result[0].toBigInt();
  }

  try_getCurrentPriceInPeg(
    token: Address,
    inAmount: BigInt,
    voluntary: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentPriceInPeg",
      "getCurrentPriceInPeg(address,uint256,bool):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(inAmount),
        ethereum.Value.fromBoolean(voluntary)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getHoldingAmounts(
    trader: Address
  ): CrossMarginTrading__getHoldingAmountsResult {
    let result = super.call(
      "getHoldingAmounts",
      "getHoldingAmounts(address):(address[],uint256[])",
      [ethereum.Value.fromAddress(trader)]
    );

    return new CrossMarginTrading__getHoldingAmountsResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray()
    );
  }

  try_getHoldingAmounts(
    trader: Address
  ): ethereum.CallResult<CrossMarginTrading__getHoldingAmountsResult> {
    let result = super.tryCall(
      "getHoldingAmounts",
      "getHoldingAmounts(address):(address[],uint256[])",
      [ethereum.Value.fromAddress(trader)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CrossMarginTrading__getHoldingAmountsResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray()
      )
    );
  }

  leveragePercent(): BigInt {
    let result = super.call(
      "leveragePercent",
      "leveragePercent():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_leveragePercent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "leveragePercent",
      "leveragePercent():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liqStakeAttackWindow(): BigInt {
    let result = super.call(
      "liqStakeAttackWindow",
      "liqStakeAttackWindow():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_liqStakeAttackWindow(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liqStakeAttackWindow",
      "liqStakeAttackWindow():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidate(liquidationCandidates: Array<Address>): BigInt {
    let result = super.call("liquidate", "liquidate(address[]):(uint256)", [
      ethereum.Value.fromAddressArray(liquidationCandidates)
    ]);

    return result[0].toBigInt();
  }

  try_liquidate(
    liquidationCandidates: Array<Address>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall("liquidate", "liquidate(address[]):(uint256)", [
      ethereum.Value.fromAddressArray(liquidationCandidates)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidationThresholdPercent(): BigInt {
    let result = super.call(
      "liquidationThresholdPercent",
      "liquidationThresholdPercent():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_liquidationThresholdPercent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidationThresholdPercent",
      "liquidationThresholdPercent():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mainCharacterCache(param0: BigInt): Address {
    let result = super.call(
      "mainCharacterCache",
      "mainCharacterCache(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_mainCharacterCache(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "mainCharacterCache",
      "mainCharacterCache(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  maintenanceFailures(param0: Address): BigInt {
    let result = super.call(
      "maintenanceFailures",
      "maintenanceFailures(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_maintenanceFailures(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maintenanceFailures",
      "maintenanceFailures(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pairPrices(
    param0: Address,
    param1: Address
  ): CrossMarginTrading__pairPricesResult {
    let result = super.call(
      "pairPrices",
      "pairPrices(address,address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return new CrossMarginTrading__pairPricesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_pairPrices(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<CrossMarginTrading__pairPricesResult> {
    let result = super.tryCall(
      "pairPrices",
      "pairPrices(address,address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CrossMarginTrading__pairPricesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  peg(): Address {
    let result = super.call("peg", "peg():(address)", []);

    return result[0].toAddress();
  }

  try_peg(): ethereum.CallResult<Address> {
    let result = super.tryCall("peg", "peg():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  priceUpdateWindow(): BigInt {
    let result = super.call(
      "priceUpdateWindow",
      "priceUpdateWindow():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_priceUpdateWindow(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "priceUpdateWindow",
      "priceUpdateWindow():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  registerDeposit(
    trader: Address,
    token: Address,
    depositAmount: BigInt
  ): BigInt {
    let result = super.call(
      "registerDeposit",
      "registerDeposit(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(trader),
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(depositAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_registerDeposit(
    trader: Address,
    token: Address,
    depositAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "registerDeposit",
      "registerDeposit(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(trader),
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(depositAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  registerTradeAndBorrow(
    trader: Address,
    tokenFrom: Address,
    tokenTo: Address,
    inAmount: BigInt,
    outAmount: BigInt
  ): CrossMarginTrading__registerTradeAndBorrowResult {
    let result = super.call(
      "registerTradeAndBorrow",
      "registerTradeAndBorrow(address,address,address,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(trader),
        ethereum.Value.fromAddress(tokenFrom),
        ethereum.Value.fromAddress(tokenTo),
        ethereum.Value.fromUnsignedBigInt(inAmount),
        ethereum.Value.fromUnsignedBigInt(outAmount)
      ]
    );

    return new CrossMarginTrading__registerTradeAndBorrowResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_registerTradeAndBorrow(
    trader: Address,
    tokenFrom: Address,
    tokenTo: Address,
    inAmount: BigInt,
    outAmount: BigInt
  ): ethereum.CallResult<CrossMarginTrading__registerTradeAndBorrowResult> {
    let result = super.tryCall(
      "registerTradeAndBorrow",
      "registerTradeAndBorrow(address,address,address,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(trader),
        ethereum.Value.fromAddress(tokenFrom),
        ethereum.Value.fromAddress(tokenTo),
        ethereum.Value.fromUnsignedBigInt(inAmount),
        ethereum.Value.fromUnsignedBigInt(outAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CrossMarginTrading__registerTradeAndBorrowResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  roleCache(param0: Address, param1: BigInt): boolean {
    let result = super.call("roleCache", "roleCache(address,uint256):(bool)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromUnsignedBigInt(param1)
    ]);

    return result[0].toBoolean();
  }

  try_roleCache(param0: Address, param1: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "roleCache",
      "roleCache(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  roles(): Address {
    let result = super.call("roles", "roles():(address)", []);

    return result[0].toAddress();
  }

  try_roles(): ethereum.CallResult<Address> {
    let result = super.tryCall("roles", "roles():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stakeAttackRecords(
    param0: Address
  ): CrossMarginTrading__stakeAttackRecordsResult {
    let result = super.call(
      "stakeAttackRecords",
      "stakeAttackRecords(address):(uint256,address,uint256,address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new CrossMarginTrading__stakeAttackRecordsResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toAddress()
    );
  }

  try_stakeAttackRecords(
    param0: Address
  ): ethereum.CallResult<CrossMarginTrading__stakeAttackRecordsResult> {
    let result = super.tryCall(
      "stakeAttackRecords",
      "stakeAttackRecords(address):(uint256,address,uint256,address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CrossMarginTrading__stakeAttackRecordsResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toAddress()
      )
    );
  }

  tokenCaps(param0: Address): BigInt {
    let result = super.call("tokenCaps", "tokenCaps(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_tokenCaps(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tokenCaps", "tokenCaps(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenPrices(param0: Address): CrossMarginTrading__tokenPricesResult {
    let result = super.call(
      "tokenPrices",
      "tokenPrices(address):(uint256,uint256,bytes32,bytes32)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new CrossMarginTrading__tokenPricesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBytes(),
      result[3].toBytes()
    );
  }

  try_tokenPrices(
    param0: Address
  ): ethereum.CallResult<CrossMarginTrading__tokenPricesResult> {
    let result = super.tryCall(
      "tokenPrices",
      "tokenPrices(address):(uint256,uint256,bytes32,bytes32)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CrossMarginTrading__tokenPricesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBytes(),
        value[3].toBytes()
      )
    );
  }

  totalLong(param0: Address): BigInt {
    let result = super.call("totalLong", "totalLong(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_totalLong(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalLong", "totalLong(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  viewBalanceInToken(trader: Address, token: Address): BigInt {
    let result = super.call(
      "viewBalanceInToken",
      "viewBalanceInToken(address,address):(uint256)",
      [ethereum.Value.fromAddress(trader), ethereum.Value.fromAddress(token)]
    );

    return result[0].toBigInt();
  }

  try_viewBalanceInToken(
    trader: Address,
    token: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "viewBalanceInToken",
      "viewBalanceInToken(address,address):(uint256)",
      [ethereum.Value.fromAddress(trader), ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  viewCurrentPriceInPeg(token: Address, inAmount: BigInt): BigInt {
    let result = super.call(
      "viewCurrentPriceInPeg",
      "viewCurrentPriceInPeg(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(inAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_viewCurrentPriceInPeg(
    token: Address,
    inAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "viewCurrentPriceInPeg",
      "viewCurrentPriceInPeg(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(inAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  viewHoldingsInPeg(trader: Address): BigInt {
    let result = super.call(
      "viewHoldingsInPeg",
      "viewHoldingsInPeg(address):(uint256)",
      [ethereum.Value.fromAddress(trader)]
    );

    return result[0].toBigInt();
  }

  try_viewHoldingsInPeg(trader: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "viewHoldingsInPeg",
      "viewHoldingsInPeg(address):(uint256)",
      [ethereum.Value.fromAddress(trader)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  viewLoanInPeg(trader: Address): BigInt {
    let result = super.call(
      "viewLoanInPeg",
      "viewLoanInPeg(address):(uint256)",
      [ethereum.Value.fromAddress(trader)]
    );

    return result[0].toBigInt();
  }

  try_viewLoanInPeg(trader: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "viewLoanInPeg",
      "viewLoanInPeg(address):(uint256)",
      [ethereum.Value.fromAddress(trader)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  volatilitySettings(
    param0: BigInt
  ): CrossMarginTrading__volatilitySettingsResult {
    let result = super.call(
      "volatilitySettings",
      "volatilitySettings(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new CrossMarginTrading__volatilitySettingsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_volatilitySettings(
    param0: BigInt
  ): ethereum.CallResult<CrossMarginTrading__volatilitySettingsResult> {
    let result = super.tryCall(
      "volatilitySettings",
      "volatilitySettings(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CrossMarginTrading__volatilitySettingsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  voluntaryUpdateWindow(): BigInt {
    let result = super.call(
      "voluntaryUpdateWindow",
      "voluntaryUpdateWindow():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_voluntaryUpdateWindow(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "voluntaryUpdateWindow",
      "voluntaryUpdateWindow():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _peg(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _roles(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddVolatilitySettingCall extends ethereum.Call {
  get inputs(): AddVolatilitySettingCall__Inputs {
    return new AddVolatilitySettingCall__Inputs(this);
  }

  get outputs(): AddVolatilitySettingCall__Outputs {
    return new AddVolatilitySettingCall__Outputs(this);
  }
}

export class AddVolatilitySettingCall__Inputs {
  _call: AddVolatilitySettingCall;

  constructor(call: AddVolatilitySettingCall) {
    this._call = call;
  }

  get _priceUpdateWindow(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _updateRatePermil(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _voluntaryUpdateWindow(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AddVolatilitySettingCall__Outputs {
  _call: AddVolatilitySettingCall;

  constructor(call: AddVolatilitySettingCall) {
    this._call = call;
  }
}

export class ChooseVolatilitySettingCall extends ethereum.Call {
  get inputs(): ChooseVolatilitySettingCall__Inputs {
    return new ChooseVolatilitySettingCall__Inputs(this);
  }

  get outputs(): ChooseVolatilitySettingCall__Outputs {
    return new ChooseVolatilitySettingCall__Outputs(this);
  }
}

export class ChooseVolatilitySettingCall__Inputs {
  _call: ChooseVolatilitySettingCall;

  constructor(call: ChooseVolatilitySettingCall) {
    this._call = call;
  }

  get index(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChooseVolatilitySettingCall__Outputs {
  _call: ChooseVolatilitySettingCall;

  constructor(call: ChooseVolatilitySettingCall) {
    this._call = call;
  }
}

export class DisburseLiqStakeAttacksCall extends ethereum.Call {
  get inputs(): DisburseLiqStakeAttacksCall__Inputs {
    return new DisburseLiqStakeAttacksCall__Inputs(this);
  }

  get outputs(): DisburseLiqStakeAttacksCall__Outputs {
    return new DisburseLiqStakeAttacksCall__Outputs(this);
  }
}

export class DisburseLiqStakeAttacksCall__Inputs {
  _call: DisburseLiqStakeAttacksCall;

  constructor(call: DisburseLiqStakeAttacksCall) {
    this._call = call;
  }

  get liquidatedAccounts(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class DisburseLiqStakeAttacksCall__Outputs {
  _call: DisburseLiqStakeAttacksCall;

  constructor(call: DisburseLiqStakeAttacksCall) {
    this._call = call;
  }
}

export class GetCurrentPriceInPegCall extends ethereum.Call {
  get inputs(): GetCurrentPriceInPegCall__Inputs {
    return new GetCurrentPriceInPegCall__Inputs(this);
  }

  get outputs(): GetCurrentPriceInPegCall__Outputs {
    return new GetCurrentPriceInPegCall__Outputs(this);
  }
}

export class GetCurrentPriceInPegCall__Inputs {
  _call: GetCurrentPriceInPegCall;

  constructor(call: GetCurrentPriceInPegCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get inAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get voluntary(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class GetCurrentPriceInPegCall__Outputs {
  _call: GetCurrentPriceInPegCall;

  constructor(call: GetCurrentPriceInPegCall) {
    this._call = call;
  }

  get priceInPeg(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class LiquidateCall extends ethereum.Call {
  get inputs(): LiquidateCall__Inputs {
    return new LiquidateCall__Inputs(this);
  }

  get outputs(): LiquidateCall__Outputs {
    return new LiquidateCall__Outputs(this);
  }
}

export class LiquidateCall__Inputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }

  get liquidationCandidates(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class LiquidateCall__Outputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }

  get maintainerCut(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RegisterBorrowCall extends ethereum.Call {
  get inputs(): RegisterBorrowCall__Inputs {
    return new RegisterBorrowCall__Inputs(this);
  }

  get outputs(): RegisterBorrowCall__Outputs {
    return new RegisterBorrowCall__Outputs(this);
  }
}

export class RegisterBorrowCall__Inputs {
  _call: RegisterBorrowCall;

  constructor(call: RegisterBorrowCall) {
    this._call = call;
  }

  get trader(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get borrowToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get borrowAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RegisterBorrowCall__Outputs {
  _call: RegisterBorrowCall;

  constructor(call: RegisterBorrowCall) {
    this._call = call;
  }
}

export class RegisterDepositCall extends ethereum.Call {
  get inputs(): RegisterDepositCall__Inputs {
    return new RegisterDepositCall__Inputs(this);
  }

  get outputs(): RegisterDepositCall__Outputs {
    return new RegisterDepositCall__Outputs(this);
  }
}

export class RegisterDepositCall__Inputs {
  _call: RegisterDepositCall;

  constructor(call: RegisterDepositCall) {
    this._call = call;
  }

  get trader(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get depositAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RegisterDepositCall__Outputs {
  _call: RegisterDepositCall;

  constructor(call: RegisterDepositCall) {
    this._call = call;
  }

  get extinguishableDebt(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RegisterLiquidationCall extends ethereum.Call {
  get inputs(): RegisterLiquidationCall__Inputs {
    return new RegisterLiquidationCall__Inputs(this);
  }

  get outputs(): RegisterLiquidationCall__Outputs {
    return new RegisterLiquidationCall__Outputs(this);
  }
}

export class RegisterLiquidationCall__Inputs {
  _call: RegisterLiquidationCall;

  constructor(call: RegisterLiquidationCall) {
    this._call = call;
  }

  get trader(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RegisterLiquidationCall__Outputs {
  _call: RegisterLiquidationCall;

  constructor(call: RegisterLiquidationCall) {
    this._call = call;
  }
}

export class RegisterOvercollateralizedBorrowCall extends ethereum.Call {
  get inputs(): RegisterOvercollateralizedBorrowCall__Inputs {
    return new RegisterOvercollateralizedBorrowCall__Inputs(this);
  }

  get outputs(): RegisterOvercollateralizedBorrowCall__Outputs {
    return new RegisterOvercollateralizedBorrowCall__Outputs(this);
  }
}

export class RegisterOvercollateralizedBorrowCall__Inputs {
  _call: RegisterOvercollateralizedBorrowCall;

  constructor(call: RegisterOvercollateralizedBorrowCall) {
    this._call = call;
  }

  get trader(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get depositToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get depositAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get borrowToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get withdrawAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class RegisterOvercollateralizedBorrowCall__Outputs {
  _call: RegisterOvercollateralizedBorrowCall;

  constructor(call: RegisterOvercollateralizedBorrowCall) {
    this._call = call;
  }
}

export class RegisterTradeAndBorrowCall extends ethereum.Call {
  get inputs(): RegisterTradeAndBorrowCall__Inputs {
    return new RegisterTradeAndBorrowCall__Inputs(this);
  }

  get outputs(): RegisterTradeAndBorrowCall__Outputs {
    return new RegisterTradeAndBorrowCall__Outputs(this);
  }
}

export class RegisterTradeAndBorrowCall__Inputs {
  _call: RegisterTradeAndBorrowCall;

  constructor(call: RegisterTradeAndBorrowCall) {
    this._call = call;
  }

  get trader(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenFrom(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenTo(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get inAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get outAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class RegisterTradeAndBorrowCall__Outputs {
  _call: RegisterTradeAndBorrowCall;

  constructor(call: RegisterTradeAndBorrowCall) {
    this._call = call;
  }

  get extinguishableDebt(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get borrowAmount(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class RegisterWithdrawalCall extends ethereum.Call {
  get inputs(): RegisterWithdrawalCall__Inputs {
    return new RegisterWithdrawalCall__Inputs(this);
  }

  get outputs(): RegisterWithdrawalCall__Outputs {
    return new RegisterWithdrawalCall__Outputs(this);
  }
}

export class RegisterWithdrawalCall__Inputs {
  _call: RegisterWithdrawalCall;

  constructor(call: RegisterWithdrawalCall) {
    this._call = call;
  }

  get trader(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get withdrawToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get withdrawAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RegisterWithdrawalCall__Outputs {
  _call: RegisterWithdrawalCall;

  constructor(call: RegisterWithdrawalCall) {
    this._call = call;
  }
}

export class SetCoolingOffPeriodCall extends ethereum.Call {
  get inputs(): SetCoolingOffPeriodCall__Inputs {
    return new SetCoolingOffPeriodCall__Inputs(this);
  }

  get outputs(): SetCoolingOffPeriodCall__Outputs {
    return new SetCoolingOffPeriodCall__Outputs(this);
  }
}

export class SetCoolingOffPeriodCall__Inputs {
  _call: SetCoolingOffPeriodCall;

  constructor(call: SetCoolingOffPeriodCall) {
    this._call = call;
  }

  get blocks(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetCoolingOffPeriodCall__Outputs {
  _call: SetCoolingOffPeriodCall;

  constructor(call: SetCoolingOffPeriodCall) {
    this._call = call;
  }
}

export class SetFailureThresholdCall extends ethereum.Call {
  get inputs(): SetFailureThresholdCall__Inputs {
    return new SetFailureThresholdCall__Inputs(this);
  }

  get outputs(): SetFailureThresholdCall__Outputs {
    return new SetFailureThresholdCall__Outputs(this);
  }
}

export class SetFailureThresholdCall__Inputs {
  _call: SetFailureThresholdCall;

  constructor(call: SetFailureThresholdCall) {
    this._call = call;
  }

  get threshFactor(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetFailureThresholdCall__Outputs {
  _call: SetFailureThresholdCall;

  constructor(call: SetFailureThresholdCall) {
    this._call = call;
  }
}

export class SetLeveragePercentCall extends ethereum.Call {
  get inputs(): SetLeveragePercentCall__Inputs {
    return new SetLeveragePercentCall__Inputs(this);
  }

  get outputs(): SetLeveragePercentCall__Outputs {
    return new SetLeveragePercentCall__Outputs(this);
  }
}

export class SetLeveragePercentCall__Inputs {
  _call: SetLeveragePercentCall;

  constructor(call: SetLeveragePercentCall) {
    this._call = call;
  }

  get _leveragePercent(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetLeveragePercentCall__Outputs {
  _call: SetLeveragePercentCall;

  constructor(call: SetLeveragePercentCall) {
    this._call = call;
  }
}

export class SetLiqStakeAttackWindowCall extends ethereum.Call {
  get inputs(): SetLiqStakeAttackWindowCall__Inputs {
    return new SetLiqStakeAttackWindowCall__Inputs(this);
  }

  get outputs(): SetLiqStakeAttackWindowCall__Outputs {
    return new SetLiqStakeAttackWindowCall__Outputs(this);
  }
}

export class SetLiqStakeAttackWindowCall__Inputs {
  _call: SetLiqStakeAttackWindowCall;

  constructor(call: SetLiqStakeAttackWindowCall) {
    this._call = call;
  }

  get window(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetLiqStakeAttackWindowCall__Outputs {
  _call: SetLiqStakeAttackWindowCall;

  constructor(call: SetLiqStakeAttackWindowCall) {
    this._call = call;
  }
}

export class SetLiquidationPathCall extends ethereum.Call {
  get inputs(): SetLiquidationPathCall__Inputs {
    return new SetLiquidationPathCall__Inputs(this);
  }

  get outputs(): SetLiquidationPathCall__Outputs {
    return new SetLiquidationPathCall__Outputs(this);
  }
}

export class SetLiquidationPathCall__Inputs {
  _call: SetLiquidationPathCall;

  constructor(call: SetLiquidationPathCall) {
    this._call = call;
  }

  get amms(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class SetLiquidationPathCall__Outputs {
  _call: SetLiquidationPathCall;

  constructor(call: SetLiquidationPathCall) {
    this._call = call;
  }
}

export class SetLiquidationThresholdPercentCall extends ethereum.Call {
  get inputs(): SetLiquidationThresholdPercentCall__Inputs {
    return new SetLiquidationThresholdPercentCall__Inputs(this);
  }

  get outputs(): SetLiquidationThresholdPercentCall__Outputs {
    return new SetLiquidationThresholdPercentCall__Outputs(this);
  }
}

export class SetLiquidationThresholdPercentCall__Inputs {
  _call: SetLiquidationThresholdPercentCall;

  constructor(call: SetLiquidationThresholdPercentCall) {
    this._call = call;
  }

  get threshold(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetLiquidationThresholdPercentCall__Outputs {
  _call: SetLiquidationThresholdPercentCall;

  constructor(call: SetLiquidationThresholdPercentCall) {
    this._call = call;
  }
}

export class SetMaintainerCutPercentCall extends ethereum.Call {
  get inputs(): SetMaintainerCutPercentCall__Inputs {
    return new SetMaintainerCutPercentCall__Inputs(this);
  }

  get outputs(): SetMaintainerCutPercentCall__Outputs {
    return new SetMaintainerCutPercentCall__Outputs(this);
  }
}

export class SetMaintainerCutPercentCall__Inputs {
  _call: SetMaintainerCutPercentCall;

  constructor(call: SetMaintainerCutPercentCall) {
    this._call = call;
  }

  get cut(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaintainerCutPercentCall__Outputs {
  _call: SetMaintainerCutPercentCall;

  constructor(call: SetMaintainerCutPercentCall) {
    this._call = call;
  }
}

export class SetPriceUpdateWindowCall extends ethereum.Call {
  get inputs(): SetPriceUpdateWindowCall__Inputs {
    return new SetPriceUpdateWindowCall__Inputs(this);
  }

  get outputs(): SetPriceUpdateWindowCall__Outputs {
    return new SetPriceUpdateWindowCall__Outputs(this);
  }
}

export class SetPriceUpdateWindowCall__Inputs {
  _call: SetPriceUpdateWindowCall;

  constructor(call: SetPriceUpdateWindowCall) {
    this._call = call;
  }

  get window(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get voluntaryWindow(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetPriceUpdateWindowCall__Outputs {
  _call: SetPriceUpdateWindowCall;

  constructor(call: SetPriceUpdateWindowCall) {
    this._call = call;
  }
}

export class SetTokenCapCall extends ethereum.Call {
  get inputs(): SetTokenCapCall__Inputs {
    return new SetTokenCapCall__Inputs(this);
  }

  get outputs(): SetTokenCapCall__Outputs {
    return new SetTokenCapCall__Outputs(this);
  }
}

export class SetTokenCapCall__Inputs {
  _call: SetTokenCapCall;

  constructor(call: SetTokenCapCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get cap(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetTokenCapCall__Outputs {
  _call: SetTokenCapCall;

  constructor(call: SetTokenCapCall) {
    this._call = call;
  }
}

export class SetUpdateRateCall extends ethereum.Call {
  get inputs(): SetUpdateRateCall__Inputs {
    return new SetUpdateRateCall__Inputs(this);
  }

  get outputs(): SetUpdateRateCall__Outputs {
    return new SetUpdateRateCall__Outputs(this);
  }
}

export class SetUpdateRateCall__Inputs {
  _call: SetUpdateRateCall;

  constructor(call: SetUpdateRateCall) {
    this._call = call;
  }

  get rate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetUpdateRateCall__Outputs {
  _call: SetUpdateRateCall;

  constructor(call: SetUpdateRateCall) {
    this._call = call;
  }
}

export class UpdateMainCharacterCacheCall extends ethereum.Call {
  get inputs(): UpdateMainCharacterCacheCall__Inputs {
    return new UpdateMainCharacterCacheCall__Inputs(this);
  }

  get outputs(): UpdateMainCharacterCacheCall__Outputs {
    return new UpdateMainCharacterCacheCall__Outputs(this);
  }
}

export class UpdateMainCharacterCacheCall__Inputs {
  _call: UpdateMainCharacterCacheCall;

  constructor(call: UpdateMainCharacterCacheCall) {
    this._call = call;
  }

  get role(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateMainCharacterCacheCall__Outputs {
  _call: UpdateMainCharacterCacheCall;

  constructor(call: UpdateMainCharacterCacheCall) {
    this._call = call;
  }
}

export class UpdateRoleCacheCall extends ethereum.Call {
  get inputs(): UpdateRoleCacheCall__Inputs {
    return new UpdateRoleCacheCall__Inputs(this);
  }

  get outputs(): UpdateRoleCacheCall__Outputs {
    return new UpdateRoleCacheCall__Outputs(this);
  }
}

export class UpdateRoleCacheCall__Inputs {
  _call: UpdateRoleCacheCall;

  constructor(call: UpdateRoleCacheCall) {
    this._call = call;
  }

  get role(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get contr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class UpdateRoleCacheCall__Outputs {
  _call: UpdateRoleCacheCall;

  constructor(call: UpdateRoleCacheCall) {
    this._call = call;
  }
}
