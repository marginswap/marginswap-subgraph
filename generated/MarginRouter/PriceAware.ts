// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class PriceAware__pairPricesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class PriceAware__tokenPricesResult {
  value0: BigInt;
  value1: BigInt;
  value2: Bytes;
  value3: Bytes;

  constructor(value0: BigInt, value1: BigInt, value2: Bytes, value3: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromFixedBytes(this.value2));
    map.set("value3", ethereum.Value.fromFixedBytes(this.value3));
    return map;
  }
}

export class PriceAware__volatilitySettingsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class PriceAware extends ethereum.SmartContract {
  static bind(address: Address): PriceAware {
    return new PriceAware("PriceAware", address);
  }

  UPDATE_RATE_PERMIL(): BigInt {
    let result = super.call(
      "UPDATE_RATE_PERMIL",
      "UPDATE_RATE_PERMIL():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_UPDATE_RATE_PERMIL(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "UPDATE_RATE_PERMIL",
      "UPDATE_RATE_PERMIL():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  amm1Factory(): Address {
    let result = super.call("amm1Factory", "amm1Factory():(address)", []);

    return result[0].toAddress();
  }

  try_amm1Factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("amm1Factory", "amm1Factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  amm1InitHash(): Bytes {
    let result = super.call("amm1InitHash", "amm1InitHash():(bytes32)", []);

    return result[0].toBytes();
  }

  try_amm1InitHash(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("amm1InitHash", "amm1InitHash():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  amm2Factory(): Address {
    let result = super.call("amm2Factory", "amm2Factory():(address)", []);

    return result[0].toAddress();
  }

  try_amm2Factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("amm2Factory", "amm2Factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  amm2InitHash(): Bytes {
    let result = super.call("amm2InitHash", "amm2InitHash():(bytes32)", []);

    return result[0].toBytes();
  }

  try_amm2InitHash(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("amm2InitHash", "amm2InitHash():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  amm3Factory(): Address {
    let result = super.call("amm3Factory", "amm3Factory():(address)", []);

    return result[0].toAddress();
  }

  try_amm3Factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("amm3Factory", "amm3Factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  amm3InitHash(): Bytes {
    let result = super.call("amm3InitHash", "amm3InitHash():(bytes32)", []);

    return result[0].toBytes();
  }

  try_amm3InitHash(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("amm3InitHash", "amm3InitHash():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  feeBase(): BigInt {
    let result = super.call("feeBase", "feeBase():(uint256)", []);

    return result[0].toBigInt();
  }

  try_feeBase(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("feeBase", "feeBase():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCurrentPriceInPeg(
    token: Address,
    inAmount: BigInt,
    voluntary: boolean
  ): BigInt {
    let result = super.call(
      "getCurrentPriceInPeg",
      "getCurrentPriceInPeg(address,uint256,bool):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(inAmount),
        ethereum.Value.fromBoolean(voluntary)
      ]
    );

    return result[0].toBigInt();
  }

  try_getCurrentPriceInPeg(
    token: Address,
    inAmount: BigInt,
    voluntary: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentPriceInPeg",
      "getCurrentPriceInPeg(address,uint256,bool):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(inAmount),
        ethereum.Value.fromBoolean(voluntary)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mainCharacterCache(param0: BigInt): Address {
    let result = super.call(
      "mainCharacterCache",
      "mainCharacterCache(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_mainCharacterCache(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "mainCharacterCache",
      "mainCharacterCache(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  oracles(param0: Address): Address {
    let result = super.call("oracles", "oracles(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toAddress();
  }

  try_oracles(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("oracles", "oracles(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pairPrices(param0: Address, param1: Address): PriceAware__pairPricesResult {
    let result = super.call(
      "pairPrices",
      "pairPrices(address,address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return new PriceAware__pairPricesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_pairPrices(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<PriceAware__pairPricesResult> {
    let result = super.tryCall(
      "pairPrices",
      "pairPrices(address,address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PriceAware__pairPricesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  peg(): Address {
    let result = super.call("peg", "peg():(address)", []);

    return result[0].toAddress();
  }

  try_peg(): ethereum.CallResult<Address> {
    let result = super.tryCall("peg", "peg():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  priceUpdateWindow(): BigInt {
    let result = super.call(
      "priceUpdateWindow",
      "priceUpdateWindow():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_priceUpdateWindow(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "priceUpdateWindow",
      "priceUpdateWindow():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  roleCache(param0: Address, param1: BigInt): boolean {
    let result = super.call("roleCache", "roleCache(address,uint256):(bool)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromUnsignedBigInt(param1)
    ]);

    return result[0].toBoolean();
  }

  try_roleCache(param0: Address, param1: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "roleCache",
      "roleCache(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  roles(): Address {
    let result = super.call("roles", "roles():(address)", []);

    return result[0].toAddress();
  }

  try_roles(): ethereum.CallResult<Address> {
    let result = super.tryCall("roles", "roles():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenPrices(param0: Address): PriceAware__tokenPricesResult {
    let result = super.call(
      "tokenPrices",
      "tokenPrices(address):(uint256,uint256,bytes32,bytes32)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new PriceAware__tokenPricesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBytes(),
      result[3].toBytes()
    );
  }

  try_tokenPrices(
    param0: Address
  ): ethereum.CallResult<PriceAware__tokenPricesResult> {
    let result = super.tryCall(
      "tokenPrices",
      "tokenPrices(address):(uint256,uint256,bytes32,bytes32)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PriceAware__tokenPricesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBytes(),
        value[3].toBytes()
      )
    );
  }

  viewCurrentPriceInPeg(token: Address, inAmount: BigInt): BigInt {
    let result = super.call(
      "viewCurrentPriceInPeg",
      "viewCurrentPriceInPeg(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(inAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_viewCurrentPriceInPeg(
    token: Address,
    inAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "viewCurrentPriceInPeg",
      "viewCurrentPriceInPeg(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(inAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  volatilitySettings(param0: BigInt): PriceAware__volatilitySettingsResult {
    let result = super.call(
      "volatilitySettings",
      "volatilitySettings(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new PriceAware__volatilitySettingsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_volatilitySettings(
    param0: BigInt
  ): ethereum.CallResult<PriceAware__volatilitySettingsResult> {
    let result = super.tryCall(
      "volatilitySettings",
      "volatilitySettings(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PriceAware__volatilitySettingsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  voluntaryUpdateWindow(): BigInt {
    let result = super.call(
      "voluntaryUpdateWindow",
      "voluntaryUpdateWindow():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_voluntaryUpdateWindow(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "voluntaryUpdateWindow",
      "voluntaryUpdateWindow():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AddVolatilitySettingCall extends ethereum.Call {
  get inputs(): AddVolatilitySettingCall__Inputs {
    return new AddVolatilitySettingCall__Inputs(this);
  }

  get outputs(): AddVolatilitySettingCall__Outputs {
    return new AddVolatilitySettingCall__Outputs(this);
  }
}

export class AddVolatilitySettingCall__Inputs {
  _call: AddVolatilitySettingCall;

  constructor(call: AddVolatilitySettingCall) {
    this._call = call;
  }

  get _priceUpdateWindow(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _updateRatePermil(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _voluntaryUpdateWindow(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AddVolatilitySettingCall__Outputs {
  _call: AddVolatilitySettingCall;

  constructor(call: AddVolatilitySettingCall) {
    this._call = call;
  }
}

export class ChooseVolatilitySettingCall extends ethereum.Call {
  get inputs(): ChooseVolatilitySettingCall__Inputs {
    return new ChooseVolatilitySettingCall__Inputs(this);
  }

  get outputs(): ChooseVolatilitySettingCall__Outputs {
    return new ChooseVolatilitySettingCall__Outputs(this);
  }
}

export class ChooseVolatilitySettingCall__Inputs {
  _call: ChooseVolatilitySettingCall;

  constructor(call: ChooseVolatilitySettingCall) {
    this._call = call;
  }

  get index(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChooseVolatilitySettingCall__Outputs {
  _call: ChooseVolatilitySettingCall;

  constructor(call: ChooseVolatilitySettingCall) {
    this._call = call;
  }
}

export class GetCurrentPriceInPegCall extends ethereum.Call {
  get inputs(): GetCurrentPriceInPegCall__Inputs {
    return new GetCurrentPriceInPegCall__Inputs(this);
  }

  get outputs(): GetCurrentPriceInPegCall__Outputs {
    return new GetCurrentPriceInPegCall__Outputs(this);
  }
}

export class GetCurrentPriceInPegCall__Inputs {
  _call: GetCurrentPriceInPegCall;

  constructor(call: GetCurrentPriceInPegCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get inAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get voluntary(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class GetCurrentPriceInPegCall__Outputs {
  _call: GetCurrentPriceInPegCall;

  constructor(call: GetCurrentPriceInPegCall) {
    this._call = call;
  }

  get priceInPeg(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SetLiquidationPathCall extends ethereum.Call {
  get inputs(): SetLiquidationPathCall__Inputs {
    return new SetLiquidationPathCall__Inputs(this);
  }

  get outputs(): SetLiquidationPathCall__Outputs {
    return new SetLiquidationPathCall__Outputs(this);
  }
}

export class SetLiquidationPathCall__Inputs {
  _call: SetLiquidationPathCall;

  constructor(call: SetLiquidationPathCall) {
    this._call = call;
  }

  get amms(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class SetLiquidationPathCall__Outputs {
  _call: SetLiquidationPathCall;

  constructor(call: SetLiquidationPathCall) {
    this._call = call;
  }
}

export class SetPriceOracleCall extends ethereum.Call {
  get inputs(): SetPriceOracleCall__Inputs {
    return new SetPriceOracleCall__Inputs(this);
  }

  get outputs(): SetPriceOracleCall__Outputs {
    return new SetPriceOracleCall__Outputs(this);
  }
}

export class SetPriceOracleCall__Inputs {
  _call: SetPriceOracleCall;

  constructor(call: SetPriceOracleCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get oracle(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetPriceOracleCall__Outputs {
  _call: SetPriceOracleCall;

  constructor(call: SetPriceOracleCall) {
    this._call = call;
  }
}

export class SetPriceUpdateWindowCall extends ethereum.Call {
  get inputs(): SetPriceUpdateWindowCall__Inputs {
    return new SetPriceUpdateWindowCall__Inputs(this);
  }

  get outputs(): SetPriceUpdateWindowCall__Outputs {
    return new SetPriceUpdateWindowCall__Outputs(this);
  }
}

export class SetPriceUpdateWindowCall__Inputs {
  _call: SetPriceUpdateWindowCall;

  constructor(call: SetPriceUpdateWindowCall) {
    this._call = call;
  }

  get window(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get voluntaryWindow(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetPriceUpdateWindowCall__Outputs {
  _call: SetPriceUpdateWindowCall;

  constructor(call: SetPriceUpdateWindowCall) {
    this._call = call;
  }
}

export class SetUpdateRateCall extends ethereum.Call {
  get inputs(): SetUpdateRateCall__Inputs {
    return new SetUpdateRateCall__Inputs(this);
  }

  get outputs(): SetUpdateRateCall__Outputs {
    return new SetUpdateRateCall__Outputs(this);
  }
}

export class SetUpdateRateCall__Inputs {
  _call: SetUpdateRateCall;

  constructor(call: SetUpdateRateCall) {
    this._call = call;
  }

  get rate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetUpdateRateCall__Outputs {
  _call: SetUpdateRateCall;

  constructor(call: SetUpdateRateCall) {
    this._call = call;
  }
}

export class UpdateMainCharacterCacheCall extends ethereum.Call {
  get inputs(): UpdateMainCharacterCacheCall__Inputs {
    return new UpdateMainCharacterCacheCall__Inputs(this);
  }

  get outputs(): UpdateMainCharacterCacheCall__Outputs {
    return new UpdateMainCharacterCacheCall__Outputs(this);
  }
}

export class UpdateMainCharacterCacheCall__Inputs {
  _call: UpdateMainCharacterCacheCall;

  constructor(call: UpdateMainCharacterCacheCall) {
    this._call = call;
  }

  get role(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateMainCharacterCacheCall__Outputs {
  _call: UpdateMainCharacterCacheCall;

  constructor(call: UpdateMainCharacterCacheCall) {
    this._call = call;
  }
}

export class UpdateRoleCacheCall extends ethereum.Call {
  get inputs(): UpdateRoleCacheCall__Inputs {
    return new UpdateRoleCacheCall__Inputs(this);
  }

  get outputs(): UpdateRoleCacheCall__Outputs {
    return new UpdateRoleCacheCall__Outputs(this);
  }
}

export class UpdateRoleCacheCall__Inputs {
  _call: UpdateRoleCacheCall;

  constructor(call: UpdateRoleCacheCall) {
    this._call = call;
  }

  get role(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get contr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class UpdateRoleCacheCall__Outputs {
  _call: UpdateRoleCacheCall;

  constructor(call: UpdateRoleCacheCall) {
    this._call = call;
  }
}
