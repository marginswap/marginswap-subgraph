// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AccountUpdated extends ethereum.Event {
  get params(): AccountUpdated__Params {
    return new AccountUpdated__Params(this);
  }
}

export class AccountUpdated__Params {
  _event: AccountUpdated;

  constructor(event: AccountUpdated) {
    this._event = event;
  }

  get trader(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class MarginRouter extends ethereum.SmartContract {
  static bind(address: Address): MarginRouter {
    return new MarginRouter("MarginRouter", address);
  }

  WETH(): Address {
    let result = super.call("WETH", "WETH():(address)", []);

    return result[0].toAddress();
  }

  try_WETH(): ethereum.CallResult<Address> {
    let result = super.tryCall("WETH", "WETH():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  authorizedSwapExactT4T(
    amountIn: BigInt,
    amountOutMin: BigInt,
    amms: Bytes,
    tokens: Array<Address>
  ): Array<BigInt> {
    let result = super.call(
      "authorizedSwapExactT4T",
      "authorizedSwapExactT4T(uint256,uint256,bytes32,address[]):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromUnsignedBigInt(amountOutMin),
        ethereum.Value.fromFixedBytes(amms),
        ethereum.Value.fromAddressArray(tokens)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_authorizedSwapExactT4T(
    amountIn: BigInt,
    amountOutMin: BigInt,
    amms: Bytes,
    tokens: Array<Address>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "authorizedSwapExactT4T",
      "authorizedSwapExactT4T(uint256,uint256,bytes32,address[]):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromUnsignedBigInt(amountOutMin),
        ethereum.Value.fromFixedBytes(amms),
        ethereum.Value.fromAddressArray(tokens)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  authorizedSwapT4ExactT(
    amountOut: BigInt,
    amountInMax: BigInt,
    amms: Bytes,
    tokens: Array<Address>
  ): Array<BigInt> {
    let result = super.call(
      "authorizedSwapT4ExactT",
      "authorizedSwapT4ExactT(uint256,uint256,bytes32,address[]):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amountOut),
        ethereum.Value.fromUnsignedBigInt(amountInMax),
        ethereum.Value.fromFixedBytes(amms),
        ethereum.Value.fromAddressArray(tokens)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_authorizedSwapT4ExactT(
    amountOut: BigInt,
    amountInMax: BigInt,
    amms: Bytes,
    tokens: Array<Address>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "authorizedSwapT4ExactT",
      "authorizedSwapT4ExactT(uint256,uint256,bytes32,address[]):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amountOut),
        ethereum.Value.fromUnsignedBigInt(amountInMax),
        ethereum.Value.fromFixedBytes(amms),
        ethereum.Value.fromAddressArray(tokens)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAmountsIn(
    outAmount: BigInt,
    amms: Bytes,
    tokens: Array<Address>
  ): Array<BigInt> {
    let result = super.call(
      "getAmountsIn",
      "getAmountsIn(uint256,bytes32,address[]):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(outAmount),
        ethereum.Value.fromFixedBytes(amms),
        ethereum.Value.fromAddressArray(tokens)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_getAmountsIn(
    outAmount: BigInt,
    amms: Bytes,
    tokens: Array<Address>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getAmountsIn",
      "getAmountsIn(uint256,bytes32,address[]):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(outAmount),
        ethereum.Value.fromFixedBytes(amms),
        ethereum.Value.fromAddressArray(tokens)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAmountsOut(
    inAmount: BigInt,
    amms: Bytes,
    tokens: Array<Address>
  ): Array<BigInt> {
    let result = super.call(
      "getAmountsOut",
      "getAmountsOut(uint256,bytes32,address[]):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(inAmount),
        ethereum.Value.fromFixedBytes(amms),
        ethereum.Value.fromAddressArray(tokens)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_getAmountsOut(
    inAmount: BigInt,
    amms: Bytes,
    tokens: Array<Address>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getAmountsOut",
      "getAmountsOut(uint256,bytes32,address[]):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(inAmount),
        ethereum.Value.fromFixedBytes(amms),
        ethereum.Value.fromAddressArray(tokens)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  mainCharacterCache(param0: BigInt): Address {
    let result = super.call(
      "mainCharacterCache",
      "mainCharacterCache(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_mainCharacterCache(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "mainCharacterCache",
      "mainCharacterCache(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  mswapFeesPer10k(): BigInt {
    let result = super.call(
      "mswapFeesPer10k",
      "mswapFeesPer10k():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_mswapFeesPer10k(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mswapFeesPer10k",
      "mswapFeesPer10k():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  roleCache(param0: Address, param1: BigInt): boolean {
    let result = super.call("roleCache", "roleCache(address,uint256):(bool)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromUnsignedBigInt(param1)
    ]);

    return result[0].toBoolean();
  }

  try_roleCache(param0: Address, param1: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "roleCache",
      "roleCache(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  roles(): Address {
    let result = super.call("roles", "roles():(address)", []);

    return result[0].toAddress();
  }

  try_roles(): ethereum.CallResult<Address> {
    let result = super.tryCall("roles", "roles():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  swapExactTokensForTokens(
    amountIn: BigInt,
    amountOutMin: BigInt,
    amms: Bytes,
    tokens: Array<Address>,
    deadline: BigInt
  ): Array<BigInt> {
    let result = super.call(
      "swapExactTokensForTokens",
      "swapExactTokensForTokens(uint256,uint256,bytes32,address[],uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromUnsignedBigInt(amountOutMin),
        ethereum.Value.fromFixedBytes(amms),
        ethereum.Value.fromAddressArray(tokens),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_swapExactTokensForTokens(
    amountIn: BigInt,
    amountOutMin: BigInt,
    amms: Bytes,
    tokens: Array<Address>,
    deadline: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "swapExactTokensForTokens",
      "swapExactTokensForTokens(uint256,uint256,bytes32,address[],uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromUnsignedBigInt(amountOutMin),
        ethereum.Value.fromFixedBytes(amms),
        ethereum.Value.fromAddressArray(tokens),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  swapTokensForExactTokens(
    amountOut: BigInt,
    amountInMax: BigInt,
    amms: Bytes,
    tokens: Array<Address>,
    deadline: BigInt
  ): Array<BigInt> {
    let result = super.call(
      "swapTokensForExactTokens",
      "swapTokensForExactTokens(uint256,uint256,bytes32,address[],uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amountOut),
        ethereum.Value.fromUnsignedBigInt(amountInMax),
        ethereum.Value.fromFixedBytes(amms),
        ethereum.Value.fromAddressArray(tokens),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_swapTokensForExactTokens(
    amountOut: BigInt,
    amountInMax: BigInt,
    amms: Bytes,
    tokens: Array<Address>,
    deadline: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "swapTokensForExactTokens",
      "swapTokensForExactTokens(uint256,uint256,bytes32,address[],uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amountOut),
        ethereum.Value.fromUnsignedBigInt(amountInMax),
        ethereum.Value.fromFixedBytes(amms),
        ethereum.Value.fromAddressArray(tokens),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _WETH(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _roles(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AuthorizedSwapExactT4TCall extends ethereum.Call {
  get inputs(): AuthorizedSwapExactT4TCall__Inputs {
    return new AuthorizedSwapExactT4TCall__Inputs(this);
  }

  get outputs(): AuthorizedSwapExactT4TCall__Outputs {
    return new AuthorizedSwapExactT4TCall__Outputs(this);
  }
}

export class AuthorizedSwapExactT4TCall__Inputs {
  _call: AuthorizedSwapExactT4TCall;

  constructor(call: AuthorizedSwapExactT4TCall) {
    this._call = call;
  }

  get amountIn(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amountOutMin(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amms(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[3].value.toAddressArray();
  }
}

export class AuthorizedSwapExactT4TCall__Outputs {
  _call: AuthorizedSwapExactT4TCall;

  constructor(call: AuthorizedSwapExactT4TCall) {
    this._call = call;
  }

  get amounts(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class AuthorizedSwapT4ExactTCall extends ethereum.Call {
  get inputs(): AuthorizedSwapT4ExactTCall__Inputs {
    return new AuthorizedSwapT4ExactTCall__Inputs(this);
  }

  get outputs(): AuthorizedSwapT4ExactTCall__Outputs {
    return new AuthorizedSwapT4ExactTCall__Outputs(this);
  }
}

export class AuthorizedSwapT4ExactTCall__Inputs {
  _call: AuthorizedSwapT4ExactTCall;

  constructor(call: AuthorizedSwapT4ExactTCall) {
    this._call = call;
  }

  get amountOut(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amountInMax(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amms(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[3].value.toAddressArray();
  }
}

export class AuthorizedSwapT4ExactTCall__Outputs {
  _call: AuthorizedSwapT4ExactTCall;

  constructor(call: AuthorizedSwapT4ExactTCall) {
    this._call = call;
  }

  get amounts(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class CrossBorrowCall extends ethereum.Call {
  get inputs(): CrossBorrowCall__Inputs {
    return new CrossBorrowCall__Inputs(this);
  }

  get outputs(): CrossBorrowCall__Outputs {
    return new CrossBorrowCall__Outputs(this);
  }
}

export class CrossBorrowCall__Inputs {
  _call: CrossBorrowCall;

  constructor(call: CrossBorrowCall) {
    this._call = call;
  }

  get borrowToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get borrowAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CrossBorrowCall__Outputs {
  _call: CrossBorrowCall;

  constructor(call: CrossBorrowCall) {
    this._call = call;
  }
}

export class CrossCloseAccountCall extends ethereum.Call {
  get inputs(): CrossCloseAccountCall__Inputs {
    return new CrossCloseAccountCall__Inputs(this);
  }

  get outputs(): CrossCloseAccountCall__Outputs {
    return new CrossCloseAccountCall__Outputs(this);
  }
}

export class CrossCloseAccountCall__Inputs {
  _call: CrossCloseAccountCall;

  constructor(call: CrossCloseAccountCall) {
    this._call = call;
  }
}

export class CrossCloseAccountCall__Outputs {
  _call: CrossCloseAccountCall;

  constructor(call: CrossCloseAccountCall) {
    this._call = call;
  }
}

export class CrossDepositCall extends ethereum.Call {
  get inputs(): CrossDepositCall__Inputs {
    return new CrossDepositCall__Inputs(this);
  }

  get outputs(): CrossDepositCall__Outputs {
    return new CrossDepositCall__Outputs(this);
  }
}

export class CrossDepositCall__Inputs {
  _call: CrossDepositCall;

  constructor(call: CrossDepositCall) {
    this._call = call;
  }

  get depositToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get depositAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CrossDepositCall__Outputs {
  _call: CrossDepositCall;

  constructor(call: CrossDepositCall) {
    this._call = call;
  }
}

export class CrossDepositETHCall extends ethereum.Call {
  get inputs(): CrossDepositETHCall__Inputs {
    return new CrossDepositETHCall__Inputs(this);
  }

  get outputs(): CrossDepositETHCall__Outputs {
    return new CrossDepositETHCall__Outputs(this);
  }
}

export class CrossDepositETHCall__Inputs {
  _call: CrossDepositETHCall;

  constructor(call: CrossDepositETHCall) {
    this._call = call;
  }
}

export class CrossDepositETHCall__Outputs {
  _call: CrossDepositETHCall;

  constructor(call: CrossDepositETHCall) {
    this._call = call;
  }
}

export class CrossOvercollateralizedBorrowCall extends ethereum.Call {
  get inputs(): CrossOvercollateralizedBorrowCall__Inputs {
    return new CrossOvercollateralizedBorrowCall__Inputs(this);
  }

  get outputs(): CrossOvercollateralizedBorrowCall__Outputs {
    return new CrossOvercollateralizedBorrowCall__Outputs(this);
  }
}

export class CrossOvercollateralizedBorrowCall__Inputs {
  _call: CrossOvercollateralizedBorrowCall;

  constructor(call: CrossOvercollateralizedBorrowCall) {
    this._call = call;
  }

  get depositToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get depositAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get borrowToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get withdrawAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class CrossOvercollateralizedBorrowCall__Outputs {
  _call: CrossOvercollateralizedBorrowCall;

  constructor(call: CrossOvercollateralizedBorrowCall) {
    this._call = call;
  }
}

export class CrossWithdrawCall extends ethereum.Call {
  get inputs(): CrossWithdrawCall__Inputs {
    return new CrossWithdrawCall__Inputs(this);
  }

  get outputs(): CrossWithdrawCall__Outputs {
    return new CrossWithdrawCall__Outputs(this);
  }
}

export class CrossWithdrawCall__Inputs {
  _call: CrossWithdrawCall;

  constructor(call: CrossWithdrawCall) {
    this._call = call;
  }

  get withdrawToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get withdrawAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CrossWithdrawCall__Outputs {
  _call: CrossWithdrawCall;

  constructor(call: CrossWithdrawCall) {
    this._call = call;
  }
}

export class CrossWithdrawETHCall extends ethereum.Call {
  get inputs(): CrossWithdrawETHCall__Inputs {
    return new CrossWithdrawETHCall__Inputs(this);
  }

  get outputs(): CrossWithdrawETHCall__Outputs {
    return new CrossWithdrawETHCall__Outputs(this);
  }
}

export class CrossWithdrawETHCall__Inputs {
  _call: CrossWithdrawETHCall;

  constructor(call: CrossWithdrawETHCall) {
    this._call = call;
  }

  get withdrawAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CrossWithdrawETHCall__Outputs {
  _call: CrossWithdrawETHCall;

  constructor(call: CrossWithdrawETHCall) {
    this._call = call;
  }
}

export class SwapExactTokensForTokensCall extends ethereum.Call {
  get inputs(): SwapExactTokensForTokensCall__Inputs {
    return new SwapExactTokensForTokensCall__Inputs(this);
  }

  get outputs(): SwapExactTokensForTokensCall__Outputs {
    return new SwapExactTokensForTokensCall__Outputs(this);
  }
}

export class SwapExactTokensForTokensCall__Inputs {
  _call: SwapExactTokensForTokensCall;

  constructor(call: SwapExactTokensForTokensCall) {
    this._call = call;
  }

  get amountIn(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amountOutMin(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amms(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[3].value.toAddressArray();
  }

  get deadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class SwapExactTokensForTokensCall__Outputs {
  _call: SwapExactTokensForTokensCall;

  constructor(call: SwapExactTokensForTokensCall) {
    this._call = call;
  }

  get amounts(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class SwapTokensForExactTokensCall extends ethereum.Call {
  get inputs(): SwapTokensForExactTokensCall__Inputs {
    return new SwapTokensForExactTokensCall__Inputs(this);
  }

  get outputs(): SwapTokensForExactTokensCall__Outputs {
    return new SwapTokensForExactTokensCall__Outputs(this);
  }
}

export class SwapTokensForExactTokensCall__Inputs {
  _call: SwapTokensForExactTokensCall;

  constructor(call: SwapTokensForExactTokensCall) {
    this._call = call;
  }

  get amountOut(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amountInMax(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amms(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[3].value.toAddressArray();
  }

  get deadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class SwapTokensForExactTokensCall__Outputs {
  _call: SwapTokensForExactTokensCall;

  constructor(call: SwapTokensForExactTokensCall) {
    this._call = call;
  }

  get amounts(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class UpdateMainCharacterCacheCall extends ethereum.Call {
  get inputs(): UpdateMainCharacterCacheCall__Inputs {
    return new UpdateMainCharacterCacheCall__Inputs(this);
  }

  get outputs(): UpdateMainCharacterCacheCall__Outputs {
    return new UpdateMainCharacterCacheCall__Outputs(this);
  }
}

export class UpdateMainCharacterCacheCall__Inputs {
  _call: UpdateMainCharacterCacheCall;

  constructor(call: UpdateMainCharacterCacheCall) {
    this._call = call;
  }

  get role(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateMainCharacterCacheCall__Outputs {
  _call: UpdateMainCharacterCacheCall;

  constructor(call: UpdateMainCharacterCacheCall) {
    this._call = call;
  }
}

export class UpdateRoleCacheCall extends ethereum.Call {
  get inputs(): UpdateRoleCacheCall__Inputs {
    return new UpdateRoleCacheCall__Inputs(this);
  }

  get outputs(): UpdateRoleCacheCall__Outputs {
    return new UpdateRoleCacheCall__Outputs(this);
  }
}

export class UpdateRoleCacheCall__Inputs {
  _call: UpdateRoleCacheCall;

  constructor(call: UpdateRoleCacheCall) {
    this._call = call;
  }

  get role(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get contr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class UpdateRoleCacheCall__Outputs {
  _call: UpdateRoleCacheCall;

  constructor(call: UpdateRoleCacheCall) {
    this._call = call;
  }
}
