// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class SpotTrade extends ethereum.Event {
  get params(): SpotTrade__Params {
    return new SpotTrade__Params(this);
  }
}

export class SpotTrade__Params {
  _event: SpotTrade;

  constructor(event: SpotTrade) {
    this._event = event;
  }

  get trader(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fromToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get toToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get fromAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get toAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class SpotRouter extends ethereum.SmartContract {
  static bind(address: Address): SpotRouter {
    return new SpotRouter("SpotRouter", address);
  }

  WETH(): Address {
    let result = super.call("WETH", "WETH():(address)", []);

    return result[0].toAddress();
  }

  try_WETH(): ethereum.CallResult<Address> {
    let result = super.tryCall("WETH", "WETH():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  amm1Factory(): Address {
    let result = super.call("amm1Factory", "amm1Factory():(address)", []);

    return result[0].toAddress();
  }

  try_amm1Factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("amm1Factory", "amm1Factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  amm1InitHash(): Bytes {
    let result = super.call("amm1InitHash", "amm1InitHash():(bytes32)", []);

    return result[0].toBytes();
  }

  try_amm1InitHash(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("amm1InitHash", "amm1InitHash():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  amm2Factory(): Address {
    let result = super.call("amm2Factory", "amm2Factory():(address)", []);

    return result[0].toAddress();
  }

  try_amm2Factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("amm2Factory", "amm2Factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  amm2InitHash(): Bytes {
    let result = super.call("amm2InitHash", "amm2InitHash():(bytes32)", []);

    return result[0].toBytes();
  }

  try_amm2InitHash(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("amm2InitHash", "amm2InitHash():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  amm3Factory(): Address {
    let result = super.call("amm3Factory", "amm3Factory():(address)", []);

    return result[0].toAddress();
  }

  try_amm3Factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("amm3Factory", "amm3Factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  amm3InitHash(): Bytes {
    let result = super.call("amm3InitHash", "amm3InitHash():(bytes32)", []);

    return result[0].toBytes();
  }

  try_amm3InitHash(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("amm3InitHash", "amm3InitHash():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getAmountsIn(
    outAmount: BigInt,
    amms: Bytes,
    tokens: Array<Address>
  ): Array<BigInt> {
    let result = super.call(
      "getAmountsIn",
      "getAmountsIn(uint256,bytes32,address[]):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(outAmount),
        ethereum.Value.fromFixedBytes(amms),
        ethereum.Value.fromAddressArray(tokens)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_getAmountsIn(
    outAmount: BigInt,
    amms: Bytes,
    tokens: Array<Address>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getAmountsIn",
      "getAmountsIn(uint256,bytes32,address[]):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(outAmount),
        ethereum.Value.fromFixedBytes(amms),
        ethereum.Value.fromAddressArray(tokens)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAmountsOut(
    inAmount: BigInt,
    amms: Bytes,
    tokens: Array<Address>
  ): Array<BigInt> {
    let result = super.call(
      "getAmountsOut",
      "getAmountsOut(uint256,bytes32,address[]):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(inAmount),
        ethereum.Value.fromFixedBytes(amms),
        ethereum.Value.fromAddressArray(tokens)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_getAmountsOut(
    inAmount: BigInt,
    amms: Bytes,
    tokens: Array<Address>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getAmountsOut",
      "getAmountsOut(uint256,bytes32,address[]):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(inAmount),
        ethereum.Value.fromFixedBytes(amms),
        ethereum.Value.fromAddressArray(tokens)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  swapExactTokensForETH(
    amountIn: BigInt,
    amountOutMin: BigInt,
    amms: Bytes,
    tokens: Array<Address>,
    to: Address,
    deadline: BigInt
  ): Array<BigInt> {
    let result = super.call(
      "swapExactTokensForETH",
      "swapExactTokensForETH(uint256,uint256,bytes32,address[],address,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromUnsignedBigInt(amountOutMin),
        ethereum.Value.fromFixedBytes(amms),
        ethereum.Value.fromAddressArray(tokens),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_swapExactTokensForETH(
    amountIn: BigInt,
    amountOutMin: BigInt,
    amms: Bytes,
    tokens: Array<Address>,
    to: Address,
    deadline: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "swapExactTokensForETH",
      "swapExactTokensForETH(uint256,uint256,bytes32,address[],address,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromUnsignedBigInt(amountOutMin),
        ethereum.Value.fromFixedBytes(amms),
        ethereum.Value.fromAddressArray(tokens),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  swapExactTokensForTokens(
    amountIn: BigInt,
    amountOutMin: BigInt,
    amms: Bytes,
    tokens: Array<Address>,
    to: Address,
    deadline: BigInt
  ): Array<BigInt> {
    let result = super.call(
      "swapExactTokensForTokens",
      "swapExactTokensForTokens(uint256,uint256,bytes32,address[],address,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromUnsignedBigInt(amountOutMin),
        ethereum.Value.fromFixedBytes(amms),
        ethereum.Value.fromAddressArray(tokens),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_swapExactTokensForTokens(
    amountIn: BigInt,
    amountOutMin: BigInt,
    amms: Bytes,
    tokens: Array<Address>,
    to: Address,
    deadline: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "swapExactTokensForTokens",
      "swapExactTokensForTokens(uint256,uint256,bytes32,address[],address,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromUnsignedBigInt(amountOutMin),
        ethereum.Value.fromFixedBytes(amms),
        ethereum.Value.fromAddressArray(tokens),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  swapTokensForExactETH(
    amountOut: BigInt,
    amountInMax: BigInt,
    amms: Bytes,
    tokens: Array<Address>,
    to: Address,
    deadline: BigInt
  ): Array<BigInt> {
    let result = super.call(
      "swapTokensForExactETH",
      "swapTokensForExactETH(uint256,uint256,bytes32,address[],address,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amountOut),
        ethereum.Value.fromUnsignedBigInt(amountInMax),
        ethereum.Value.fromFixedBytes(amms),
        ethereum.Value.fromAddressArray(tokens),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_swapTokensForExactETH(
    amountOut: BigInt,
    amountInMax: BigInt,
    amms: Bytes,
    tokens: Array<Address>,
    to: Address,
    deadline: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "swapTokensForExactETH",
      "swapTokensForExactETH(uint256,uint256,bytes32,address[],address,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amountOut),
        ethereum.Value.fromUnsignedBigInt(amountInMax),
        ethereum.Value.fromFixedBytes(amms),
        ethereum.Value.fromAddressArray(tokens),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  swapTokensForExactTokens(
    amountOut: BigInt,
    amountInMax: BigInt,
    amms: Bytes,
    tokens: Array<Address>,
    to: Address,
    deadline: BigInt
  ): Array<BigInt> {
    let result = super.call(
      "swapTokensForExactTokens",
      "swapTokensForExactTokens(uint256,uint256,bytes32,address[],address,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amountOut),
        ethereum.Value.fromUnsignedBigInt(amountInMax),
        ethereum.Value.fromFixedBytes(amms),
        ethereum.Value.fromAddressArray(tokens),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_swapTokensForExactTokens(
    amountOut: BigInt,
    amountInMax: BigInt,
    amms: Bytes,
    tokens: Array<Address>,
    to: Address,
    deadline: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "swapTokensForExactTokens",
      "swapTokensForExactTokens(uint256,uint256,bytes32,address[],address,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amountOut),
        ethereum.Value.fromUnsignedBigInt(amountInMax),
        ethereum.Value.fromFixedBytes(amms),
        ethereum.Value.fromAddressArray(tokens),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _WETH(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amm1Factory(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amm2Factory(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _amm3Factory(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _amm1InitHash(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get _amm2InitHash(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get _amm3InitHash(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class SwapETHForExactTokensCall extends ethereum.Call {
  get inputs(): SwapETHForExactTokensCall__Inputs {
    return new SwapETHForExactTokensCall__Inputs(this);
  }

  get outputs(): SwapETHForExactTokensCall__Outputs {
    return new SwapETHForExactTokensCall__Outputs(this);
  }
}

export class SwapETHForExactTokensCall__Inputs {
  _call: SwapETHForExactTokensCall;

  constructor(call: SwapETHForExactTokensCall) {
    this._call = call;
  }

  get amountOut(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amms(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get to(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class SwapETHForExactTokensCall__Outputs {
  _call: SwapETHForExactTokensCall;

  constructor(call: SwapETHForExactTokensCall) {
    this._call = call;
  }

  get amounts(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class SwapExactETHForTokensCall extends ethereum.Call {
  get inputs(): SwapExactETHForTokensCall__Inputs {
    return new SwapExactETHForTokensCall__Inputs(this);
  }

  get outputs(): SwapExactETHForTokensCall__Outputs {
    return new SwapExactETHForTokensCall__Outputs(this);
  }
}

export class SwapExactETHForTokensCall__Inputs {
  _call: SwapExactETHForTokensCall;

  constructor(call: SwapExactETHForTokensCall) {
    this._call = call;
  }

  get amountOutMin(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amms(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get to(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class SwapExactETHForTokensCall__Outputs {
  _call: SwapExactETHForTokensCall;

  constructor(call: SwapExactETHForTokensCall) {
    this._call = call;
  }

  get amounts(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class SwapExactTokensForETHCall extends ethereum.Call {
  get inputs(): SwapExactTokensForETHCall__Inputs {
    return new SwapExactTokensForETHCall__Inputs(this);
  }

  get outputs(): SwapExactTokensForETHCall__Outputs {
    return new SwapExactTokensForETHCall__Outputs(this);
  }
}

export class SwapExactTokensForETHCall__Inputs {
  _call: SwapExactTokensForETHCall;

  constructor(call: SwapExactTokensForETHCall) {
    this._call = call;
  }

  get amountIn(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amountOutMin(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amms(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[3].value.toAddressArray();
  }

  get to(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class SwapExactTokensForETHCall__Outputs {
  _call: SwapExactTokensForETHCall;

  constructor(call: SwapExactTokensForETHCall) {
    this._call = call;
  }

  get amounts(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class SwapExactTokensForTokensCall extends ethereum.Call {
  get inputs(): SwapExactTokensForTokensCall__Inputs {
    return new SwapExactTokensForTokensCall__Inputs(this);
  }

  get outputs(): SwapExactTokensForTokensCall__Outputs {
    return new SwapExactTokensForTokensCall__Outputs(this);
  }
}

export class SwapExactTokensForTokensCall__Inputs {
  _call: SwapExactTokensForTokensCall;

  constructor(call: SwapExactTokensForTokensCall) {
    this._call = call;
  }

  get amountIn(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amountOutMin(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amms(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[3].value.toAddressArray();
  }

  get to(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class SwapExactTokensForTokensCall__Outputs {
  _call: SwapExactTokensForTokensCall;

  constructor(call: SwapExactTokensForTokensCall) {
    this._call = call;
  }

  get amounts(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class SwapTokensForExactETHCall extends ethereum.Call {
  get inputs(): SwapTokensForExactETHCall__Inputs {
    return new SwapTokensForExactETHCall__Inputs(this);
  }

  get outputs(): SwapTokensForExactETHCall__Outputs {
    return new SwapTokensForExactETHCall__Outputs(this);
  }
}

export class SwapTokensForExactETHCall__Inputs {
  _call: SwapTokensForExactETHCall;

  constructor(call: SwapTokensForExactETHCall) {
    this._call = call;
  }

  get amountOut(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amountInMax(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amms(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[3].value.toAddressArray();
  }

  get to(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class SwapTokensForExactETHCall__Outputs {
  _call: SwapTokensForExactETHCall;

  constructor(call: SwapTokensForExactETHCall) {
    this._call = call;
  }

  get amounts(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class SwapTokensForExactTokensCall extends ethereum.Call {
  get inputs(): SwapTokensForExactTokensCall__Inputs {
    return new SwapTokensForExactTokensCall__Inputs(this);
  }

  get outputs(): SwapTokensForExactTokensCall__Outputs {
    return new SwapTokensForExactTokensCall__Outputs(this);
  }
}

export class SwapTokensForExactTokensCall__Inputs {
  _call: SwapTokensForExactTokensCall;

  constructor(call: SwapTokensForExactTokensCall) {
    this._call = call;
  }

  get amountOut(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amountInMax(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amms(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[3].value.toAddressArray();
  }

  get to(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class SwapTokensForExactTokensCall__Outputs {
  _call: SwapTokensForExactTokensCall;

  constructor(call: SwapTokensForExactTokensCall) {
    this._call = call;
  }

  get amounts(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}
