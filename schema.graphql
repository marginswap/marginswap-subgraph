enum BalanceType {
  CROSS_MARGIN_HOLDING
  CROSS_MARGIN_DEBT
  ISOLATED_MARGIN_HOLDING
  ISOLATED_MARGIN_DEBT
  BOND_DEPOSIT
}

enum SwapType {
  SPOT
  MARGIN
}

type Balance @entity {
  id: ID! # ID format is <trader-address>-<token-address>-<BalanceType>
  trader: Bytes! # trader address
  token: Bytes! # token address
  balance: BigInt!
  balanceType: BalanceType!
  contract: Bytes! # contract address
  createdAt: BigInt!
  updatedAt: BigInt
}

type AggregatedBalance @entity {
  id: ID! # ID format is <token-address>-<BalanceType>
  token: Bytes! # token address
  balance: BigInt!
  balanceType: BalanceType!
  contract: Bytes! # contract address
  createdAt: BigInt!
  updatedAt: BigInt
}

type Swap @entity {
  id: ID! # ID is transaction hash
  trader: Bytes!
  fromToken: Bytes!
  toToken: Bytes!
  fromAmount: BigInt!
  toAmount: BigInt!
  type: SwapType!
  createdAt: BigInt!
}

type DailySwapVolume @entity {
  id: ID! # <day-id>-<token-address>-<swap-type> (daily ID is event.block.timestamp.toI32() / 86400)
  token: Bytes!
  volume: BigInt!
  type: SwapType!
  createdAt: BigInt!
  updatedAt: BigInt
}

type MarginswapDayData @entity {
  id: ID! #timestamp rounded to current day by dividing by 86400
  dailyVolumeUSD: BigDecimal!
  totalVolumeUSD: BigDecimal!
  txCount: BigInt!
  createdAt: BigInt!
  updatedAt: BigInt!
}

type Order @entity {
  id: ID!
  fromToken: Bytes!
  toToken: Bytes!
  inAmount: BigInt!
  outAmount: BigInt!
  maker: Bytes!
  expiration: BigInt!
  remainingInAmount: BigInt!
  amountTaken: BigInt!
  createdAt: BigInt!
  updatedAt: BigInt!
}

type OrderTaken @entity {
  id: ID!
  orderId: ID!
  amountTaken: BigInt!
  taker: Bytes!
  remainingInAmount: BigInt!
  createdAt: BigInt!
  updatedAt: BigInt!
}
